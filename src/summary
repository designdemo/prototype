原型模式主要适用于以下场景：
1、类初始化消耗资源较多。
2、new产生的一个对象需要非常繁琐的过程（数据准备、访问权限等）
3、构造函数比较复杂。
4、循环体中生产大量对象时。
在Spring中，原型模式应用得非常广泛。例如scope=“prototype”，在我们经常用的JSON.parseObject()也是一种原型模式

克隆包括 深克隆、浅克隆
浅克隆：只是完整复制了值类型数据，没有赋值引用对象
深克隆：完整复制了值类型数据，并赋值引用对象

克隆破坏单例模式
    如果我们克隆的目标的对象是单例对象，那意味着，深克隆就会破坏单例。实际上防止
    克隆破坏单例解决思路非常简单，禁止深克隆便可。要么你我们的单例类不实现
    Cloneable接口；要么我们重写clone()方法，，在clone方法中返回单例对象即可，
    具体代码如下：
    @Override
    protected Object clone() throws CloneNotSupportedException {
        return INSTANCE;
    }

常用的ArrayList就实现了Cloneable接口，来看代码clone()方法的实现